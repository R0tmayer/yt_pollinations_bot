from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from keyboards import main_menu_kb
from services.user_service import is_user_allowed
from supabase import create_client
import os

user_router = Router()

ADMIN_USERNAMES = {"R0tmayer", "pirat_youtubov"}

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

@user_router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    is_admin = message.from_user.username in ADMIN_USERNAMES
    await state.clear()
    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –Ω–µ–π—Ä–æ-–∞—Ä—Ç–∞!</b>\n\n"
        "–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-—Ö—É–¥–æ–∂–Ω–∏–∫. –ü—Ä–æ—Å—Ç–æ –¥–∞–π—Ç–µ –º–Ω–µ –∏–¥–µ—é, –∏ —è –ø—Ä–µ–≤—Ä–∞—â—É –µ—ë –≤ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n"
        "–ì–æ—Ç–æ–≤—ã —Ç–≤–æ—Ä–∏—Ç—å? –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å —à–µ–¥–µ–≤—Ä'!",
        reply_markup=main_menu_kb(is_admin=is_admin), parse_mode='HTML'
    )

@user_router.message(F.text == "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    is_admin = message.from_user.username in ADMIN_USERNAMES
    await state.set_state(None)
    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –Ω–µ–π—Ä–æ-–∞—Ä—Ç–∞!</b>\n\n"
        "–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-—Ö—É–¥–æ–∂–Ω–∏–∫. –ü—Ä–æ—Å—Ç–æ –¥–∞–π—Ç–µ –º–Ω–µ –∏–¥–µ—é, –∏ —è –ø—Ä–µ–≤—Ä–∞—â—É –µ—ë –≤ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n"
        "–ì–æ—Ç–æ–≤—ã —Ç–≤–æ—Ä–∏—Ç—å? –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å —à–µ–¥–µ–≤—Ä'!",
        reply_markup=main_menu_kb(is_admin=is_admin), parse_mode='HTML'
    )

@user_router.message(F.text == "üë§ –í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø")
async def ask_username(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @):")
    await state.set_state("wait_username_to_add")

@user_router.message(F.state == "wait_username_to_add")
async def add_user_to_db(message: types.Message, state: FSMContext):
    username = message.text.strip().lstrip("@")
    supabase.table("users").insert({"username": username}).execute()
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.")
    await state.clear() 