---
alwaysApply: true
---
### Основные принципы

- **Главная цель:** Писать максимально простой, понятный и легко поддерживаемый код.
- **Стиль:** Код должен быть "человеческим". Избегай сложных конструкций, однострочников (one-liners) и "модных примочек", если они усложняют чтение. Всегда предпочитай прямолинейное решение, даже если оно занимает больше строк.
- **Объяснения:** Пиши код так, чтобы он был понятен без дополнительных разъяснений.

### Технологический стек

- **Язык:** Python
- **Фреймворк для бота:** `aiogram` (версия 3.x)
- **База данных:** `Supabase` (через официальный Python клиент)
- **Конфигурация:** Токен бота (полученный от @BotFather) и другие секретные данные хранятся в переменных окружения (например, в файле `.env`) и никогда не прописываются напрямую в коде.

### Стиль кода (Code Style)

- **PEP 8:** Строго следуй стайлгайду PEP 8. Всегда.
- **Именование:**
    - Переменные и функции: `snake_case` (например, `get_user_data`).
    - Классы: `PascalCase` (например, `UserStates`).
    - Константы: `UPPER_SNAKE_CASE` (например, `ADMIN_ID`).
    - Названия должны быть описательными и на английском языке.
- **Простота:**
    - Не используй сложные `list comprehensions`, где обычный цикл `for` будет понятнее.
    - Лямбда-функции (`lambda`) используй только для очень простых, одноразовых операций. Если логика сложнее, создай полноценную функцию через `def`.

### Работа с `aiogram`

- **Обработчики (Handlers):** Для каждой команды (`/start`), сообщения или колбэка создавай отдельную асинхронную функцию. Не смешивай логику нескольких команд в одной функции.
- **Роутеры (Routers):** Группируй связанные обработчики в отдельные роутеры. Например, создай `admin_handlers.py` и `user_handlers.py`, в каждом из которых будет свой экземпляр `Router`.
- **Состояния (FSM):** Для многошаговых диалогов (например, регистрация, опрос) используй машину состояний `aiogram.fsm`. Определяй состояния в отдельном классе, унаследованном от `StatesGroup`.
- **Клавиатуры:** Используй `InlineKeyboardBuilder` и `ReplyKeyboardBuilder` для создания клавиатур. Это проще и нагляднее, чем создавать их вручную из списков.

### Работа с `Supabase`

- **Клиент:** Создавай один экземпляр клиента Supabase и передавай его в хендлеры через middleware или dependency injection, чтобы не создавать новое подключение при каждом запросе.
- **Запросы:** Пиши простые и понятные запросы к базе данных. Используй стандартные методы клиента: `.select()`, `.insert()`, `.update()`, `.delete()`.
- **Обработка ошибок:** Всегда оборачивай вызовы к базе данных в блок `try...except`, чтобы корректно обрабатывать возможные ошибки сети или доступа к данным. Сообщай пользователю, если что-то пошло не так.

### Комментарии и документация

- **Комментарии:** Комментируй только нетривиальные участки кода. Объясняй **"почему"** код написан именно так, а не **"что"** он делает (это должно быть понятно из самого кода). Комментарий должен состоять из одного простого предложения.
- **Docstrings:** Добавляй простые докстринги к функциям, описывая их назначение в одной строке. Например: `"""Отправляет приветственное сообщение пользователю."""`.